{"id":7,"jsonrpc":"2.0","result":[{"deprecated":false,"detail":"","documentation":"","filterText":"enum enumName {}","insertText":"enum ${1:name} {\n\t$0\n}","insertTextFormat":2,"kind":14,"label":"enum enumName {}","sortText":""},{"deprecated":false,"detail":"","documentation":"","filterText":"macro","insertText":"macro","insertTextFormat":1,"kind":14,"label":"macro","sortText":""},{"deprecated":false,"detail":"","documentation":"","filterText":"match","insertText":"match","insertTextFormat":1,"kind":14,"label":"match","sortText":""},{"deprecated":false,"detail":"","documentation":"","filterText":"match (condExpr) {}","insertText":"match ${1:condExpr} {\n\t$0\n}","insertTextFormat":2,"kind":14,"label":"match (condExpr) {}","sortText":""},{"deprecated":false,"detail":"","documentation":"","filterText":"from module_name import pkg.xxx","insertText":"from ${1:module_name} import ${0:pkg.xxx}","insertTextFormat":2,"kind":14,"label":"from module_name import pkg.xxx","sortText":""},{"deprecated":false,"detail":"","documentation":"","filterText":"main","insertText":"main","insertTextFormat":1,"kind":14,"label":"main","sortText":""},{"deprecated":false,"detail":"(class) public class AtomicInt64Internal","documentation":"","filterText":"AtomicInt64Internal","insertText":"AtomicInt64Internal","insertTextFormat":1,"kind":7,"label":"AtomicInt64Internal","sortText":""},{"deprecated":false,"detail":"(function) func init(val: Int64): UnknownType","documentation":"","filterText":"AtomicInt64Internal","insertText":"AtomicInt64Internal(${1:val: Int64})","insertTextFormat":2,"kind":3,"label":"AtomicInt64Internal(val: Int64)","sortText":""},{"deprecated":false,"detail":"(interface) public interface Comparable extends Equatable, LT, GT, LE, GE","documentation":"","filterText":"Comparable","insertText":"Comparable","insertTextFormat":1,"kind":8,"label":"Comparable","sortText":""},{"deprecated":false,"detail":"(class) public open class ConcurrentModificationException extends RuntimeException","documentation":"","filterText":"ConcurrentModificationException","insertText":"ConcurrentModificationException","insertTextFormat":1,"kind":7,"label":"ConcurrentModificationException","sortText":""},{"deprecated":false,"detail":"(function) func init()","documentation":"","filterText":"ConcurrentModificationException","insertText":"ConcurrentModificationException()","insertTextFormat":2,"kind":3,"label":"ConcurrentModificationException()","sortText":""},{"deprecated":false,"detail":"(function) func init(message: String)","documentation":"","filterText":"ConcurrentModificationException","insertText":"ConcurrentModificationException(${1:message: String})","insertTextFormat":2,"kind":3,"label":"ConcurrentModificationException(message: String)","sortText":""},{"deprecated":false,"detail":"(variable) let EMPTY_UINT8_ARRAY: Array<UInt8>","documentation":"","filterText":"EMPTY_UINT8_ARRAY","insertText":"EMPTY_UINT8_ARRAY","insertTextFormat":1,"kind":6,"label":"EMPTY_UINT8_ARRAY","sortText":""},{"deprecated":false,"detail":"(class) public open class EmptyStackException extends RuntimeException","documentation":"","filterText":"EmptyStackException","insertText":"EmptyStackException","insertTextFormat":1,"kind":7,"label":"EmptyStackException","sortText":""},{"deprecated":false,"detail":"(function) func init()","documentation":"","filterText":"EmptyStackException","insertText":"EmptyStackException()","insertTextFormat":2,"kind":3,"label":"EmptyStackException()","sortText":""},{"deprecated":false,"detail":"(function) func init(message: String)","documentation":"","filterText":"EmptyStackException","insertText":"EmptyStackException(${1:message: String})","insertTextFormat":2,"kind":3,"label":"EmptyStackException(message: String)","sortText":""},{"deprecated":false,"detail":"(variable) let MAX_INT16: Int16","documentation":"","filterText":"MAX_INT16","insertText":"MAX_INT16","insertTextFormat":1,"kind":6,"label":"MAX_INT16","sortText":""},{"deprecated":false,"detail":"(variable) let MAX_INT32: Int32","documentation":"","filterText":"MAX_INT32","insertText":"MAX_INT32","insertTextFormat":1,"kind":6,"label":"MAX_INT32","sortText":""},{"deprecated":false,"detail":"(variable) let MAX_INT64: Int64","documentation":"","filterText":"MAX_INT64","insertText":"MAX_INT64","insertTextFormat":1,"kind":6,"label":"MAX_INT64","sortText":""},{"deprecated":false,"detail":"(variable) let MAX_INT8: Int8","documentation":"","filterText":"MAX_INT8","insertText":"MAX_INT8","insertTextFormat":1,"kind":6,"label":"MAX_INT8","sortText":""},{"deprecated":false,"detail":"(variable) let MAX_INT_NATIVE: IntNative","documentation":"","filterText":"MAX_INT_NATIVE","insertText":"MAX_INT_NATIVE","insertTextFormat":1,"kind":6,"label":"MAX_INT_NATIVE","sortText":""},{"deprecated":false,"detail":"(variable) let MAX_UINT16: UInt16","documentation":"","filterText":"MAX_UINT16","insertText":"MAX_UINT16","insertTextFormat":1,"kind":6,"label":"MAX_UINT16","sortText":""},{"deprecated":false,"detail":"(variable) let MAX_UINT32: UInt32","documentation":"","filterText":"MAX_UINT32","insertText":"MAX_UINT32","insertTextFormat":1,"kind":6,"label":"MAX_UINT32","sortText":""},{"deprecated":false,"detail":"(variable) let MAX_UINT64: UInt64","documentation":"","filterText":"MAX_UINT64","insertText":"MAX_UINT64","insertTextFormat":1,"kind":6,"label":"MAX_UINT64","sortText":""},{"deprecated":false,"detail":"(variable) let MAX_UINT8: UInt8","documentation":"","filterText":"MAX_UINT8","insertText":"MAX_UINT8","insertTextFormat":1,"kind":6,"label":"MAX_UINT8","sortText":""},{"deprecated":false,"detail":"(variable) let MAX_UINT_NATIVE: UIntNative","documentation":"","filterText":"MAX_UINT_NATIVE","insertText":"MAX_UINT_NATIVE","insertTextFormat":1,"kind":6,"label":"MAX_UINT_NATIVE","sortText":""},{"deprecated":false,"detail":"(variable) let MIN_INT_NATIVE: IntNative","documentation":"","filterText":"MIN_INT_NATIVE","insertText":"MIN_INT_NATIVE","insertTextFormat":1,"kind":6,"label":"MIN_INT_NATIVE","sortText":""},{"deprecated":false,"detail":"(function) public func ResumeAll(addr: UInt64, callback: () -> Bool): Unit","documentation":"","filterText":"ResumeAll","insertText":"ResumeAll(${1:addr: UInt64}, ${2:callback: () -> Bool})","insertTextFormat":2,"kind":2,"label":"ResumeAll(addr: UInt64, callback: () -> Bool)","sortText":""},{"deprecated":false,"detail":"(class) public open class VirtualMachineError extends Error","documentation":"","filterText":"VirtualMachineError","insertText":"VirtualMachineError","insertTextFormat":1,"kind":7,"label":"VirtualMachineError","sortText":""},{"deprecated":false,"detail":"(function) func init()","documentation":"","filterText":"VirtualMachineError","insertText":"VirtualMachineError()","insertTextFormat":2,"kind":3,"label":"VirtualMachineError()","sortText":""},{"deprecated":false,"detail":"(function) func init(message: String)","documentation":"","filterText":"VirtualMachineError","insertText":"VirtualMachineError(${1:message: String})","insertTextFormat":2,"kind":3,"label":"VirtualMachineError(message: String)","sortText":""},{"deprecated":false,"detail":"(function) public func map(arrayList: ArrayList<T>, transform: (Generics-T) -> Generics-U): ArrayList","documentation":"","filterText":"map","insertText":"map(${1:arrayList: ArrayList<T>}, ${2:transform: (Generics-T) -> Generics-U})","insertTextFormat":2,"kind":2,"label":"map(arrayList: ArrayList<T>, transform: (Generics-T) -> Generics-U)","sortText":""},{"deprecated":false,"detail":"(function) func map2test(): Int64","documentation":"","filterText":"map2test","insertText":"map2test()","insertTextFormat":2,"kind":2,"label":"map2test()","sortText":""},{"deprecated":false,"detail":"(class) open class mapA","documentation":"","filterText":"mapA","insertText":"mapA","insertTextFormat":1,"kind":7,"label":"mapA","sortText":""},{"deprecated":false,"detail":"(function) func init(): UnknownType","documentation":"","filterText":"mapA","insertText":"mapA()","insertTextFormat":2,"kind":3,"label":"mapA()","sortText":""},{"deprecated":false,"detail":"(class) class mapB extends mapA","documentation":"","filterText":"mapB","insertText":"mapB","insertTextFormat":1,"kind":7,"label":"mapB","sortText":""},{"deprecated":false,"detail":"(function) func init(): UnknownType","documentation":"","filterText":"mapB","insertText":"mapB()","insertTextFormat":2,"kind":3,"label":"mapB()","sortText":""},{"deprecated":false,"detail":"(variable) var mapFive: Invalid","documentation":"","filterText":"mapFive","insertText":"mapFive","insertTextFormat":1,"kind":6,"label":"mapFive","sortText":""},{"deprecated":false,"detail":"(variable) var mapFour: Invalid","documentation":"","filterText":"mapFour","insertText":"mapFour","insertTextFormat":1,"kind":6,"label":"mapFour","sortText":""},{"deprecated":false,"detail":"(variable) let mapOne: Invalid","documentation":"","filterText":"mapOne","insertText":"mapOne","insertTextFormat":1,"kind":6,"label":"mapOne","sortText":""},{"deprecated":false,"detail":"(variable) var mapSix: Invalid","documentation":"","filterText":"mapSix","insertText":"mapSix","insertTextFormat":1,"kind":6,"label":"mapSix","sortText":""},{"deprecated":false,"detail":"(variable) var mapTwo: Invalid","documentation":"","filterText":"mapTwo","insertText":"mapTwo","insertTextFormat":1,"kind":6,"label":"mapTwo","sortText":""},{"deprecated":false,"detail":"(variable) let mapZero: Invalid","documentation":"","filterText":"mapZero","insertText":"mapZero","insertTextFormat":1,"kind":6,"label":"mapZero","sortText":""},{"deprecated":false,"detail":"(function) func maptest(): Int64","documentation":"","filterText":"maptest","insertText":"maptest()","insertTextFormat":2,"kind":2,"label":"maptest()","sortText":""},{"deprecated":false,"detail":"(function) public func max(a: Int64, b: Int64): Int64","documentation":"","filterText":"max","insertText":"max(${1:a: Int64}, ${2:b: Int64})","insertTextFormat":2,"kind":2,"label":"max(a: Int64, b: Int64)","sortText":""},{"deprecated":false,"detail":"(variable) let nestedMap: Invalid","documentation":"","filterText":"nestedMap","insertText":"nestedMap","insertTextFormat":1,"kind":6,"label":"nestedMap","sortText":""},{"deprecated":false,"detail":"(function) public func parseMainArgs(argc: Int32, argv: CPointer<CPointer<UInt8>>): Array<Struct-String>","documentation":"","filterText":"parseMainArgs","insertText":"parseMainArgs(${1:argc: Int32}, ${2:argv: CPointer<CPointer<UInt8>>})","insertTextFormat":2,"kind":2,"label":"parseMainArgs(argc: Int32, argv: CPointer<CPointer<UInt8>>)","sortText":""}]}
