{"caseFolder":"normalTest//Map", "id":"7"}
{"jsonrpc":"2.0","id":"0","method":"initialize","params":{"processId":null,"rootPath":"C:/Users/x30009917/DevEcoStudioProjects/MyApplication3","rootUri":"file:///c%3A/Users/x30009917/DevEcoStudioProjects/MyApplication3/","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{},"didChangeWatchedFiles":{},"symbol":{},"executeCommand":{},"workspaceFolders":false,"configuration":false},"textDocument":{"synchronization":{"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"completionItem":{"snippetSupport":true}},"hover":{},"signatureHelp":{},"references":{},"documentHighlight":{"dynamicRegistration":true},"formatting":{},"rangeFormatting":{},"onTypeFormatting":{},"definition":{},"codeAction":{},"documentLink":{},"rename":{"prepareSupport":true},"semanticHighlightingCapabilities":{"semanticHighlighting":true},"callHierarchy":{},"semanticTokens":{"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","member","label"],"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"dynamicRegistration":true}}}}}
{"jsonrpc":"2.0","method":"initialized","params":{}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Work/repo/Char/NewVersion/cangjie_language_server/test/testChr/documentHighlight/Map/src/map.cj","languageId":"Cangjie","version":0,"text":"let mapZero: Map\u003cInt32, Char\u003e \u003d #{} // empty Map\nlet mapOne: Map\u003cInt32, String\u003e \u003d #{1: \"Aa\", 2: \"Bb\", 3: \"Cc\", 1: \"fir\"}\n// mapOne \u003d #{1 : \"Aa\", 2 : \"Bb\", 3 : \"Cc\"}, as duplicated key and its value\u00271 : \"fir\"\u0027 is removed.\nvar mapTwo \u003d #{4: \"Dd\", 5: \"Ee\", 6: \"Ff\"} // The type of mapTwo is inferred to be Map\u003cInt64, String\u003e.\nfunc foo() {\n    var mapThree: Map\u003cInt64, Char\u003e\n    mapThree \u003d #{7: \u0027g\u0027, 8: \u0027h\u0027, 9: \u0027i\u0027} // initialization\n}\nopen class mapA { }\nclass mapB \u003c: mapA { }\nvar mapFour \u003d #{mapA(): mapB(), mapB(): mapB()} // The type of mapFour is inferred to be Map\u003cA, B\u003e.\nvar mapFive \u003d #{1..10: 1, 1..10: 2} // The type of mapFive is inferred to be Set\u003cRange\u003cInt64\u003e\u003e.\nvar mapSix \u003d #{1..10: 1: 100 , 1..10: 2: 200} // The type of mapSix is inferred to be Map\u003cRange\u003cInt64\u003e, Int32\u003e.\nlet nestedMap \u003d #{#{1: \"Aa\", 2: \"Bb\", 3: \"Cc\"}: #{7: \u0027g\u0027, 8: \u0027h\u0027, 9: \u0027i\u0027}}\n// The type of nestedMap is inferred to be Map\u003cMap\u003cInt64, String\u003e,Map\u003cInt64, Char\u003e\u003e.\n\nfunc maptest() {\n    let mapSeven \u003d #{1: \"A\", 2: \"B\", 3: \"C\"} // The type of mapSeven is inferred to be Map\u003cInt64, String\u003e.\n    for (item in mapFour) { // The type of item is Int64*String.\n        print(\"${item}\")\n    }\n    let map7: Map\u003cInt32, String\u003e \u003d #{0: \"a\", 1: \"b\", 2: \"c\", 3: \"d\", 4: \"e\"}\n    for ((number, character) in map7) {\n        print(\"${number}\") // output: 01234\n        print(\"${character}\") // output: \"a\"\"b\"\"c\"\"d\"\"e\"\n    }\n    return 0\n}\n"}}}
{"jsonrpc":"2.0","id":"7","method":"textDocument/rename","params":{"textDocument":{"uri":"file:///d%3A/Work/repo/Char/NewVersion/cangjie_language_server/test/testChr/normalTest/Map/src/map.cj"},"position":{"line":18,"character":20},"newName":"mapFour_Rename"}}
{"jsonrpc":"2.0","id":"4","method":"shutdown","params":{}}
{"jsonrpc":"2.0","method":"exit","params":{}}

