{"caseFolder":"normalTest//Option", "id":"9"}
{"jsonrpc":"2.0","id":"0","method":"initialize","params":{"processId":null,"rootPath":"C:/Users/x30009917/DevEcoStudioProjects/MyApplication3","rootUri":"file:///c%3A/Users/x30009917/DevEcoStudioProjects/MyApplication3/","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{},"didChangeWatchedFiles":{},"symbol":{},"executeCommand":{},"workspaceFolders":false,"configuration":false},"textDocument":{"synchronization":{"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"completionItem":{"snippetSupport":true}},"hover":{},"signatureHelp":{},"references":{},"documentHighlight":{"dynamicRegistration":true},"formatting":{},"rangeFormatting":{},"onTypeFormatting":{},"definition":{},"codeAction":{},"documentLink":{},"rename":{"prepareSupport":true},"semanticHighlightingCapabilities":{"semanticHighlighting":true},"callHierarchy":{},"semanticTokens":{"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","member","label"],"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"dynamicRegistration":true}}}}}
{"jsonrpc":"2.0","method":"initialized","params":{}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d:/test_char/src/Option.cj","languageId":"Cangjie","version":0,"text":"let aaa:?String \u003d \"\" //等价于 Option\u003cString\u003e\nlet v1: ?Int64 \u003d 100 //等价于 Option\u003cInt64\u003e\nlet v2: ??Int64 \u003d 100 //等价于 Option\u003cOption\u003cInt64\u003e\u003e\n\nfunc testOptionRight() {\n    let number: Int64 \u003d match (v1) {\n        case Some(num) \u003d\u003e num // matched\n        case $None \u003d\u003e 0\n    }\n    let number2: Int64 \u003d match (v2) {\n        case Some(num) \u003d\u003e match (num) {\n              case Some(num) \u003d\u003e num // matched\n              case $None \u003d\u003e 0\n              } // matched\n        case $None \u003d\u003e 0\n    }\n}\nenum TimeUnit1 {\n\t |Year|Month|Day|Hour\n}\nlet opInt32_1 \u003d Option\u003cInt64\u003e.Some(100) // The type of \u0027opInt32_1\u0027 is \u0027Option\u003cInt32\u003e\u0027\nlet opInt32_2 \u003d Option\u003cInt32\u003e.None // The type of \u0027opInt32_2\u0027 is \u0027Option\u003cInt32\u003e\u0027\nlet opChar \u003d Option\u003cChar\u003e.Some(\u0027m\u0027) // The type of \u0027opChar\u0027 is \u0027Option\u003cChar\u003e\u0027\nlet opBool \u003d Option\u003cBool\u003e.None // The type of \u0027opBool\u0027 is \u0027Option\u003cBool\u003e\u0027\nlet opEnum \u003d Option\u003cTimeUnit1\u003e.Some(TimeUnit1.Year) // The type of \u0027opEnum\u0027 is \u0027Option\u003cTimeUnit1\u003e\u0027\n\n//支持match解构\nfunc test1(){\n    let number1: Int64 \u003d match (opInt32_1) {\n        case Some(num) \u003d\u003e num // matched\n        case $None \u003d\u003e 0\n    }\n    let number2: Int32 \u003d match (opInt32_2) {\n        case Some(num) \u003d\u003e num\n        case $None \u003d\u003e 0 // matched\n    }\n    let enumValue: String \u003d match (opEnum) {\n    case Some(tu) \u003d\u003e match (tu) {\n        case $Year \u003d\u003e \"Year\" // matched\n        case $Month \u003d\u003e \"Month\"\n        case $Day \u003d\u003e \"Day\"\n        case $Hour \u003d\u003e \"Hour\"\n        }\n    case $None \u003d\u003e \"None\"\n    }\n}"}}}
{"jsonrpc":"2.0","id":"4","method":"shutdown","params":{}}
{"jsonrpc":"2.0","method":"exit","params":{}}

